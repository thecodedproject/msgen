package api

import(
	"github.com/thecodedproject/msgen/generator/files/common"
	"github.com/thecodedproject/msgen/generator/files/proto_helpers"
	"github.com/thecodedproject/msgen/parser"
	"io"
	"path"
)

type Method struct {
	Name string
	Args []parser.Field
	ReturnArgs []parser.Field
}

func Generate(
	i parser.ProtoInterface,
	outputDir string,
) error {

	panic("not implemented")
	return nil
}

func GenerateBuffer(
	serviceRootImportPath string,
	i parser.ProtoInterface,
	writer io.Writer,
) error {

	baseTemplate := common.BaseTemplate()

	header, err := baseTemplate.Parse(apiTmpl)
	if err != nil {
		return err
	}

	_, serviceName := path.Split(serviceRootImportPath)

	methods, err := getAllMethods(i)
	if err != nil {
		return err
	}

	err = header.Execute(writer, struct{
		Package string
		Imports []string
		Methods []Method
	}{
		Package: serviceName,
		Imports: []string{
			"\"context\"",
		},
		Methods: methods,
	})
	if err != nil {
		return err
	}

	return nil
}

func getAllMethods(i parser.ProtoInterface) ([]Method, error) {

	allMethods := make([]Method, 0, len(i.Methods))
	for _, iMethod := range i.Methods {

		args, err := proto_helpers.MethodRequestFields(i, iMethod.Name)
		if err != nil {
			return nil, err
		}

		returnArgs, err := proto_helpers.MethodResponseFields(i, iMethod.Name)
		if err != nil {
			return nil, err
		}

		allMethods = append(allMethods, Method{
			Name: iMethod.Name,
			Args: args,
			ReturnArgs: returnArgs,
		})
	}

	return allMethods, nil
}

var apiTmpl = `package {{.Package}}

// Generated by msgen. DO NOT EDIT.

import(
{{- range .Imports}}
	{{.}}
{{- end}}
)

type Client interface {
{{- range .Methods}}
	{{ToCamel .Name}}({{range $index, $elem := .Args}}{{if $index}}, {{end}}{{ToLowerCamel .Name}} {{.Type}}{{end}}) {{FuncRetValsWithError .ReturnArgs}}
{{- end}}
}

`


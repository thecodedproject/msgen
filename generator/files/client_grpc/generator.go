package client_grpc

import(
	"github.com/thecodedproject/msgen/generator/files"
	"github.com/thecodedproject/msgen/generator/files/proto_helpers"
	"github.com/thecodedproject/msgen/parser"
	"io"
)

type Method struct {
	Name string
	Args []parser.Field
	ReturnArgs []parser.Field
}

func GenerateClient(
	i parser.ProtoInterface,
	outputDir string,
) error {

	panic("not implemented")
	return nil
}

func GenerateBuffer(
	serviceRootImportPath string,
	i parser.ProtoInterface,
	writer io.Writer,
) error {

	baseTemplate := files.BaseTemplate()

	header, err := baseTemplate.Parse(grpcHeaderTmpl)
	if err != nil {
		return err
	}

	err = header.Execute(writer, struct{
		Package string
		Imports []string
		ServiceName string
	}{
		Package: "grpc",
		Imports: []string{
			"context",
			"flag",
			"google.golang.org/grpc",
			"google.golang.org/grpc/connectivity",
			serviceRootImportPath + "/proto",
			"testing",
		},
		ServiceName: "SomeService",
	})
	if err != nil {
		return err
	}


	for _, method := range i.Methods {

		args, err := proto_helpers.MethodRequestFields(i, method.Name)
		if err != nil {
			return err
		}

		returnArgs, err := proto_helpers.MethodResponseFields(i, method.Name)
		if err != nil {
			return err
		}

		methodParams := Method{
			Name: method.Name,
			Args: args,
			ReturnArgs: returnArgs,
		}

		if len(methodParams.ReturnArgs) == 0 {

			methodEmptyReturnTemplate, err := baseTemplate.Parse(grpcMethodEmptyReturnTmpl)
			if err != nil {
				return err
			}

			err = methodEmptyReturnTemplate.Execute(writer, methodParams)
			if err != nil {
				return err
			}

		} else {

			methodTemplate, err := baseTemplate.Parse(grpcMethodTmpl)
			if err != nil {
				return err
			}

			err = methodTemplate.Execute(writer, methodParams)
			if err != nil {
				return err
			}
		}
	}

	return nil
}

var grpcHeaderTmpl = `package {{.Package}}

// Generated by msgen. DO NOT EDIT.

import(
{{- range .Imports}}
	"{{.}}"
{{- end}}
)

var address = flag.String("{{ToLower .ServiceName}}_grpc_address", "", "host:port of {{ToLower .ServiceName}} gRPC service")

type client struct {
	rpcConn *grpc.ClientConn
	rpcClient addpb.AddClient
}

func IsGRPCEnabled() bool {
	return *address != ""
}

func New() (*client, error) {
	conn, err := grpc.Dial(*address, grpc.WithInsecure())
	if err != nil {
		return nil, err
	}

	ctx, cancel := context.WithTimeout(context.Background(), time.Second)
	defer cancel()

	for {
		if conn.GetState() == connectivity.Ready {
			break
		}
		if !conn.WaitForStateChange(ctx, conn.GetState()) {
			return nil, errors.New("grpc timeout whilst connecting")
		}
	}

	return &client{
		rpcConn: conn,
		rpcClient: proto.NewSomeServiceClient(conn),
	}, nil
}

func NewClientForTesting(t *testing.T, conn *grpc.ClientConn) *client {
	return &Client{
		rpcConn: conn,
		rpcClient: addpb.NewAddClient(conn),
	}
}

`

var grpcMethodTmpl = `func (c *client) {{ToCamel .Name}}(
	ctx context.Context,
{{- range .Args}}
	{{ToLowerCamel .Name}} {{.Type}},
{{- end}}
) {{NamedFuncRetValsWithError .ReturnArgs}} {

	res, err := c.rpcClient.{{ToCamel .Name}}(
		ctx,
		&proto.{{ToCamel .Name}}Request{
{{- range .Args}}
			{{ToCamel .Name}}: {{ToLowerCamel .Name}},
{{- end}}
		},
	)
	if err != nil {
		{{FuncDefaultReturn_Named_WithError .ReturnArgs}}
	}

	return {{range $index, $elem := .ReturnArgs}}{{if $index}}, {{end}}res.{{ToLowerCamel .Name}}{{end}}, nil
}

`

var grpcMethodEmptyReturnTmpl = `func (c *client) {{ToCamel .Name}}(
	ctx context.Context,
{{- range .Args}}
	{{ToLowerCamel .Name}} {{.Type}},
{{- end}}
) error {

	_, err := c.rpcClient.{{ToCamel .Name}}(
		ctx,
		&proto.{{ToCamel .Name}}Request{
{{- range .Args}}
			{{ToCamel .Name}}: {{ToLowerCamel .Name}},
{{- end}}
		},
	)
	return err
}

`

package files

import(
	"io"
	"github.com/thecodedproject/msgen/parser"
	"text/template"
	"github.com/iancoleman/strcase"
)

type Method struct {
	Name string
	Args []parser.Field
	ReturnTypes []string
}

func GenerateClientLogicalClient(
	i parser.ProtoInterface,
	outputDir string,
) error {

	// output buf to dir
	return nil
}

func GenerateClientLogicalClientBuffer(
	serviceRootImportPath string,
	i parser.ProtoInterface,
	writer io.Writer,
) error {

  header := template.Must(template.New("client").Parse(headerTmpl))
	err := header.Execute(writer, struct{
		Package string
		Imports []string
	}{
		Package: "logical",
		Imports: []string{
			"context",
			serviceRootImportPath + "/ops",
		},
	})
	if err != nil {
		return err
	}

	for _, method := range i.Methods {


		methodTemplate := template.New("method").Funcs(map[string]interface{}{
			"funcRetVals": genFunctionReturn,
		})

		methodTemplate, err = methodTemplate.Parse(methodTmpl)
		if err != nil {
			return err
		}

		methodParams := Method{
			Name: method.Name,
		}

		for _, mess := range i.Messages {
			if mess.Name == method.RequestMessage {
				methodParams.Args = mess.Fields
			} else if mess.Name == method.ResponseMessage {

				for _, f := range mess.Fields {
					methodParams.ReturnTypes = append(methodParams.ReturnTypes, f.Type)
				}
			}
		}

		for i := range methodParams.Args {
			methodParams.Args[i].Name = strcase.ToLowerCamel(
				methodParams.Args[i].Name,
			)
		}

		methodParams.ReturnTypes = append(methodParams.ReturnTypes, "error")

		err := methodTemplate.Execute(writer, methodParams)
		if err != nil {
			return err
		}
	}

	return nil

}

func genFunctionReturn(returnTypes []string) string {

	if len(returnTypes) == 1 {
		return returnTypes[0]
	}

	returnStatement := "("

	for i := range returnTypes {
		returnStatement += returnTypes[i]

		if i != len(returnTypes)-1 {
			returnStatement += ", "
		}
	}

	returnStatement += ")"

	return returnStatement
}

var headerTmpl = `package {{.Package}}

// Generated by msgen. DO NOT EDIT.

import(
{{- range .Imports}}
	"{{.}}"
{{- end}}
)

type client struct {
	backends ops.Backends
}

func New(b ops.Backends) *client {

	return client{
		backends: b,
	}
}

`

var methodTmpl = `func (c *client) {{.Name}}(
	ctx context.Context,
{{- range .Args}}
	{{.Name}} {{.Type}},
{{- end}}
) {{funcRetVals .ReturnTypes}} {

	return ops.{{.Name}}(
		ctx,
		c.backends,
{{- range .Args}}
		{{.Name}},
{{- end}}
	)
}

`

package client_logical

import(
	"github.com/iancoleman/strcase"
	"github.com/thecodedproject/msgen/generator/files"
	"github.com/thecodedproject/msgen/parser"
	"io"
)

type Method struct {
	Name string
	Args []parser.Field
	ReturnTypes []string
}

func GenerateClient(
	i parser.ProtoInterface,
	outputDir string,
) error {

	panic("not implemented")
	return nil
}

func GenerateBuffer(
	serviceRootImportPath string,
	i parser.ProtoInterface,
	writer io.Writer,
) error {

	baseTemplate := files.BaseTemplate()

	header, err := baseTemplate.Parse(logicalHeaderTmpl)
	if err != nil {
		return err
	}

	err = header.Execute(writer, struct{
		Package string
		Imports []string
	}{
		Package: "logical",
		Imports: []string{
			"context",
			serviceRootImportPath + "/ops",
		},
	})
	if err != nil {
		return err
	}

	for _, method := range i.Methods {

		methodTemplate, err := baseTemplate.Parse(logicalMethodTmpl)
		if err != nil {
			return err
		}

		methodParams := Method{
			Name: method.Name,
		}

		for _, mess := range i.Messages {
			if mess.Name == method.RequestMessage {
				methodParams.Args = mess.Fields
			} else if mess.Name == method.ResponseMessage {

				for _, f := range mess.Fields {
					methodParams.ReturnTypes = append(methodParams.ReturnTypes, f.Type)
				}
			}
		}

		for i := range methodParams.Args {
			methodParams.Args[i].Name = strcase.ToLowerCamel(
				methodParams.Args[i].Name,
			)
		}

		methodParams.ReturnTypes = append(methodParams.ReturnTypes, "error")

		err = methodTemplate.Execute(writer, methodParams)
		if err != nil {
			return err
		}
	}

	return nil

}

var logicalHeaderTmpl = `package {{.Package}}

// Generated by msgen. DO NOT EDIT.

import(
{{- range .Imports}}
	"{{.}}"
{{- end}}
)

type client struct {
	backends ops.Backends
}

func New(b ops.Backends) *client {

	return client{
		backends: b,
	}
}

`

var logicalMethodTmpl = `func (c *client) {{.Name}}(
	ctx context.Context,
{{- range .Args}}
	{{.Name}} {{.Type}},
{{- end}}
) {{FuncRetVals .ReturnTypes}} {

	return ops.{{.Name}}(
		ctx,
		c.backends,
{{- range .Args}}
		{{.Name}},
{{- end}}
	)
}

`

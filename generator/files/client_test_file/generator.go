package client_test_file

import(
	"github.com/thecodedproject/msgen/generator/files"
	"github.com/thecodedproject/msgen/generator/files/proto_helpers"
	"github.com/thecodedproject/msgen/parser"
	"io"
)

type Method struct {
	Name string
	Args []parser.Field
	ReturnArgs []parser.Field
}

func GenerateClient(
	i parser.ProtoInterface,
	outputDir string,
) error {

	panic("not implemented")
	return nil
}

func GenerateBuffer(
	serviceRootImportPath string,
	i parser.ProtoInterface,
	writer io.Writer,
) error {

	baseTemplate := files.BaseTemplate()

	header, err := baseTemplate.Parse(testHeaderTmpl)
	if err != nil {
		return err
	}

	err = header.Execute(writer, struct{
		Package string
		Imports []string
		ServiceName string
	}{
		Package: "client_test",
		Imports: []string{
			"\"context\"",
			"\"github.com/stretchr/testify/suite\"",
			"\"google.golang.org/grpc\"",
			"\"google.golang.org/grpc/connectivity\"",
			"\"" + serviceRootImportPath + "\"",
			"\"" + serviceRootImportPath + "/ops\"",
			"\"testing\"",
			"logical_client \"" + serviceRootImportPath + "/client/logical\"",
			"logical_grpc \"" + serviceRootImportPath + "/client/grpc\"",
		},
		ServiceName: "SomeService",
	})
	if err != nil {
		return err
	}


	for _, method := range i.Methods {

		args, err := proto_helpers.MethodRequestFields(i, method.Name)
		if err != nil {
			return err
		}

		returnArgs, err := proto_helpers.MethodResponseFields(i, method.Name)
		if err != nil {
			return err
		}

		methodParams := Method{
			Name: method.Name,
			Args: args,
			ReturnArgs: returnArgs,
		}

		methodTemplate, err := baseTemplate.Parse(testMethodTmpl)
		if err != nil {
			return err
		}

		err = methodTemplate.Execute(writer, methodParams)
		if err != nil {
			return err
		}
	}

	return nil
}

var testHeaderTmpl = `package {{.Package}}

// Generated by msgen. DO NOT EDIT.

import(
{{- range .Imports}}
	{{.}}
{{- end}}
)


type clientSuite struct {
	suite.Suite

	ctx      context.Context
	client   service.Client
	backends *ops.Backends
}

func TestLogical(t *testing.T) {
	suite.Run(t, new(TestLogicalSuite))
}

func TestGRPC(t *testing.T) {
	suite.Run(t, new(TestGRPCSuite))
}

type TestLogicalSuite struct {
	clientSuite
}

func (s *TestLogicalSuite) SetupTest() {
	s.backends = ops.NewBackendsForTesting(s.T())
	s.client = logical_client.New(s.backends)
}

type TestGRPCSuite struct {
	clientSuite
}

func (s *TestGRPCSuite) SetupTest() {
	s.backends = ops.NewBackendsForTesting(s.T())
	s.client = grpc_client.NewForTesting(s.T(), s.backends)
}

`

var testMethodTmpl = `func (s *clientSuite) Test{{.Name}}() {
{{range .Args}}
	var {{ToLowerCamel .Name}} {{.Type}}
{{- end}}
	var err error

	{{range .ReturnArgs}}_, {{end}}err = s.client.{{ToCamel .Name}}(
{{- range .Args}}
		{{ToLowerCamel .Name}},
{{- end}}
	)
	s.Require().NoError(err)

	s.Assert().Fail("TODO: Implement test for client.{{.Name}}")
}

`


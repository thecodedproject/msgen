package client_test_file

import(
	"github.com/thecodedproject/msgen/generator/files/common"
	"github.com/thecodedproject/msgen/generator/files/proto_helpers"
	"github.com/thecodedproject/msgen/parser"
	"io"
	"path"
)

const(
	relativePath = "client/client_test.go"
)

type Method struct {
	Name string
	Args []parser.Field
	ReturnArgs []parser.Field
}

func Generate(
	serviceRootImportPath string,
	i parser.ProtoInterface,
	outputDir string,
) error {

	outputFile := path.Join(outputDir, relativePath)

	writer, err := common.CreatePathAndOpen(outputFile)
	if err != nil {
		return err
	}

	return GenerateBuffer(
		serviceRootImportPath,
		i,
		writer,
	)
}

func GenerateBuffer(
	serviceRootImportPath string,
	i parser.ProtoInterface,
	writer io.Writer,
) error {

	baseTemplate := common.BaseTemplate()

	header, err := baseTemplate.Parse(testHeaderTmpl)
	if err != nil {
		return err
	}

	err = header.Execute(writer, struct{
		Package string
		Imports []string
		ServiceName string
	}{
		Package: "client_test",
		Imports: []string{
			"\"context\"",
			"\"github.com/stretchr/testify/suite\"",
			"\"google.golang.org/grpc\"",
			"\"google.golang.org/grpc/connectivity\"",
			"\"" + serviceRootImportPath + "\"",
			"\"" + serviceRootImportPath + "/" + i.ProtoPackage + "\"",
			"\"" + serviceRootImportPath + "/ops\"",
			"\"" + serviceRootImportPath + "/rpc_server\"",
			"logical_client \"" + serviceRootImportPath + "/client/logical\"",
			"grpc_client \"" + serviceRootImportPath + "/client/grpc\"",
			"\"testing\"",
			"\"time\"",
			"\"net\"",
			"\"log\"",
		},
		ServiceName: common.ServiceNameFromRootImportPath(serviceRootImportPath),
	})
	if err != nil {
		return err
	}


	for _, method := range i.Methods {

		args, err := proto_helpers.MethodRequestFields(i, method.Name)
		if err != nil {
			return err
		}

		returnArgs, err := proto_helpers.MethodResponseFields(i, method.Name)
		if err != nil {
			return err
		}

		methodParams := Method{
			Name: method.Name,
			Args: args,
			ReturnArgs: returnArgs,
		}

		methodTemplate, err := baseTemplate.Parse(testMethodTmpl)
		if err != nil {
			return err
		}

		err = methodTemplate.Execute(writer, methodParams)
		if err != nil {
			return err
		}
	}

	return nil
}

var testHeaderTmpl = `package {{.Package}}

// Generated by msgen. DO NOT EDIT.

import(
{{- range .Imports}}
	{{.}}
{{- end}}
)

func setupServer(s *TestGRPCSuite, b ops.Backends) (string) {

	listener, err := net.Listen("tcp", "localhost:0")
	s.Require().NoError(err)

	grpcSrv := grpc.NewServer()
	s.T().Cleanup(grpcSrv.GracefulStop)

	{{ToLowerCamel .ServiceName}}Srv := rpc_server.New(b)
	{{ToLowerCamel .ServiceName}}pb.Register{{ToCamel .ServiceName}}Server(grpcSrv, {{ToLowerCamel .ServiceName}}Srv)

	go func() {
		err := grpcSrv.Serve(listener)
		s.Require().NoError(err)
	}()

	return listener.Addr().String()
}

func setupClient(s *TestGRPCSuite, b ops.Backends) {{ToLower .ServiceName}}.Client {

	serverAddr := setupServer(s, b)
	conn, err := grpc.Dial(serverAddr, grpc.WithInsecure())
	s.Require().NoError(err)

	ctx, cancel := context.WithTimeout(context.Background(), time.Second)
	defer cancel()

	for {
		if conn.GetState() == connectivity.Ready {
			break
		}

		if !conn.WaitForStateChange(ctx, conn.GetState()) {
			log.Fatal("grpc timeout whilst connecting")
		}
	}

	client := grpc_client.NewForTesting(s.T(), conn)
	return client
}


type clientSuite struct {
	suite.Suite

	ctx      context.Context
	client   {{.ServiceName}}.Client
	backends ops.Backends
}

func TestLogical(t *testing.T) {
	suite.Run(t, new(TestLogicalSuite))
}

func TestGRPC(t *testing.T) {
	suite.Run(t, new(TestGRPCSuite))
}

type TestLogicalSuite struct {
	clientSuite
}

func (s *TestLogicalSuite) SetupTest() {
	s.backends = ops.NewBackendsForTesting(s.T())
	s.client = logical_client.New(s.backends)
}

type TestGRPCSuite struct {
	clientSuite
}

func (s *TestGRPCSuite) SetupTest() {
	s.backends = ops.NewBackendsForTesting(s.T())
	s.client = setupClient(s, s.backends)
}

`

var testMethodTmpl = `func (s *clientSuite) Test{{ToCamel .Name}}() {
{{range .Args}}
	var {{ToLowerCamel .Name}} {{.Type}}
{{- end}}
	var err error

	{{range .ReturnArgs}}_, {{end}}err = s.client.{{ToCamel .Name}}(
		s.ctx,
{{- range .Args}}
		{{ToLowerCamel .Name}},
{{- end}}
	)
	s.Require().NoError(err)

	s.Assert().Fail("TODO: Implement test for client.{{ToCamel .Name}}")
}

`


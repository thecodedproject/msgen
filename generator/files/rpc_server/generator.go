package rpc_server

import(
	"github.com/thecodedproject/msgen/generator/files/common"
	"github.com/thecodedproject/msgen/generator/files/proto_helpers"
	"github.com/thecodedproject/msgen/parser"
	"io"
	"path"
)

const(
	relativePath = "rpc_server/server.go"
)

type Method struct {
	Name string
	Args []parser.Field
	ReturnArgs []parser.Field
}

func Generate(
	serviceRootImportPath string,
	i parser.ProtoInterface,
	outputDir string,
) error {

	outputFile := path.Join(outputDir, relativePath)

	writer, err := common.CreatePathAndOpen(outputFile)
	if err != nil {
		return err
	}

	return GenerateBuffer(
		serviceRootImportPath,
		i,
		writer,
	)
}

func GenerateBuffer(
	serviceRootImportPath string,
	i parser.ProtoInterface,
	writer io.Writer,
) error {

	baseTemplate := common.BaseTemplate()

	header, err := baseTemplate.Parse(testHeaderTmpl)
	if err != nil {
		return err
	}

	err = header.Execute(writer, struct{
		Package string
		Imports []string
		ServiceName string
	}{
		Package: "rpc_server",
		Imports: []string{
			"\"context\"",
			"\"" + serviceRootImportPath + "/ops\"",
			"\"" + serviceRootImportPath + "/proto\"",
		},
		ServiceName: "SomeService",
	})
	if err != nil {
		return err
	}


	for _, method := range i.Methods {

		args, err := proto_helpers.MethodRequestFields(i, method.Name)
		if err != nil {
			return err
		}

		returnArgs, err := proto_helpers.MethodResponseFields(i, method.Name)
		if err != nil {
			return err
		}

		methodParams := Method{
			Name: method.Name,
			Args: args,
			ReturnArgs: returnArgs,
		}

		methodTemplate, err := baseTemplate.Parse(testMethodTmpl)
		if err != nil {
			return err
		}

		err = methodTemplate.Execute(writer, methodParams)
		if err != nil {
			return err
		}
	}

	return nil
}

var testHeaderTmpl = `package {{.Package}}

// Generated by msgen. DO NOT EDIT.

import(
{{- range .Imports}}
	{{.}}
{{- end}}
)

type Server struct {
	b ops.Backends
}

func New(b ops.Backends) *Server {
	return &Server{
		b: b,
	}
}

`

var testMethodTmpl = `func (s *Server) {{ToCamel .Name}}(
	ctx context.Context,
	req *proto.{{ToCamel .Name}}Request,
) (*proto.{{ToCamel .Name}}Response, error) {

	{{range .ReturnArgs}}{{ToLowerCamel .Name}}, {{end}}err := ops.{{ToCamel .Name}}(
		ctx,
		s.b,
{{- range .Args}}
		req.{{ToLowerCamel .Name}},
{{- end}}
	)
	if err != nil {
		return nil, err
	}

	return &proto.{{ToCamel .Name}}Response{
{{- range .ReturnArgs}}
		{{ToCamel .Name}}: {{ToLowerCamel .Name}},
{{- end}}
	}, nil
}

`


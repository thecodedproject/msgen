package grpc

// Generated by msgen. DO NOT EDIT.

import(
	"context"
	"errors"
	"flag"
	"google.golang.org/grpc"
	"google.golang.org/grpc/connectivity"
	"order/service/otherservicepb"
	"testing"
	"time"
)

var address = flag.String("service_grpc_address", "", "host:port of service gRPC service")

type client struct {
	rpcConn *grpc.ClientConn
	rpcClient otherservicepb.SomeOtherServiceClient
}

func IsGRPCEnabled() bool {
	return *address != ""
}

func New() (*client, error) {
	conn, err := grpc.Dial(*address, grpc.WithInsecure())
	if err != nil {
		return nil, err
	}

	ctx, cancel := context.WithTimeout(context.Background(), time.Second)
	defer cancel()

	for {
		if conn.GetState() == connectivity.Ready {
			break
		}
		if !conn.WaitForStateChange(ctx, conn.GetState()) {
			return nil, errors.New("grpc timeout whilst connecting")
		}
	}

	return &client{
		rpcConn: conn,
		rpcClient: otherservicepb.NewSomeOtherServiceClient(conn),
	}, nil
}

func NewForTesting(t *testing.T, conn *grpc.ClientConn) *client {
	return &client{
		rpcConn: conn,
		rpcClient: otherservicepb.NewSomeOtherServiceClient(conn),
	}
}

func (c *client) Ping(
	ctx context.Context,
	someNestedValue *NestedVal,
) (resSomeOtherValue *OtherNestedVal, err error) {

	res, err := c.rpcClient.Ping(
		ctx,
		&otherservicepb.PingRequest{
			SomeNestedValue: someNestedValue,
		},
	)
	if err != nil {
		return resSomeOtherValue, err
	}

	return res.SomeOtherValue, nil
}


package grpc

// Generated by msgen. DO NOT EDIT.

import(
	"context"
	"flag"
	"google.golang.org/grpc"
	"google.golang.org/grpc/connectivity"
	"some/service/servicepb"
	"testing"
)

var address = flag.String("someservice_grpc_address", "", "host:port of someservice gRPC service")

type client struct {
	rpcConn *grpc.ClientConn
	rpcClient addpb.AddClient
}

func IsGRPCEnabled() bool {
	return *address != ""
}

func New() (*client, error) {
	conn, err := grpc.Dial(*address, grpc.WithInsecure())
	if err != nil {
		return nil, err
	}

	ctx, cancel := context.WithTimeout(context.Background(), time.Second)
	defer cancel()

	for {
		if conn.GetState() == connectivity.Ready {
			break
		}
		if !conn.WaitForStateChange(ctx, conn.GetState()) {
			return nil, errors.New("grpc timeout whilst connecting")
		}
	}

	return &client{
		rpcConn: conn,
		rpcClient: servicepb.NewSomeServiceClient(conn),
	}, nil
}

func NewClientForTesting(t *testing.T, conn *grpc.ClientConn) *client {
	return &Client{
		rpcConn: conn,
		rpcClient: addpb.NewAddClient(conn),
	}
}

func (c *client) Ping(
	ctx context.Context,
	int64Value int64,
	stringValue string,
) error {

	_, err := c.rpcClient.Ping(
		ctx,
		&servicepb.PingRequest{
			Int64Value: int64Value,
			StringValue: stringValue,
		},
	)
	return err
}

func (c *client) Pong(
	ctx context.Context,
) (resInt64Value int64, resStringValue string, err error) {

	res, err := c.rpcClient.Pong(
		ctx,
		&servicepb.PongRequest{
		},
	)
	if err != nil {
		return resInt64Value, resStringValue, err
	}

	return res.int64Value, res.stringValue, nil
}


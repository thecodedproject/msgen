package client_test

// Generated by msgen. DO NOT EDIT.

import(
	"context"
	"github.com/stretchr/testify/suite"
	"google.golang.org/grpc"
	"google.golang.org/grpc/connectivity"
	"some/service"
	"some/service/servicepb"
	"some/service/rpc_server"
	"some/service/state"
	logical_client "some/service/client/logical"
	grpc_client "some/service/client/grpc"
	"testing"
	"time"
	"net"
	"log"
)

func setupGRPCServer(ts *TestGRPCSuite, s state.State) (string) {

	listener, err := net.Listen("tcp", "localhost:0")
	ts.Require().NoError(err)

	grpcSrv := grpc.NewServer()
	ts.T().Cleanup(grpcSrv.GracefulStop)

	serviceSrv := rpc_server.New(s)
	servicepb.RegisterServiceServer(grpcSrv, serviceSrv)

	go func() {
		err := grpcSrv.Serve(listener)
		ts.Require().NoError(err)
	}()

	return listener.Addr().String()
}

func setupGRPCClient(ts *TestGRPCSuite, s state.State) service.Client {

	serverAddr := setupGRPCServer(ts, s)
	conn, err := grpc.Dial(serverAddr, grpc.WithInsecure())
	ts.Require().NoError(err)

	ctx, cancel := context.WithTimeout(context.Background(), time.Second)
	defer cancel()

	for {
		if conn.GetState() == connectivity.Ready {
			break
		}

		if !conn.WaitForStateChange(ctx, conn.GetState()) {
			log.Fatal("grpc timeout whilst connecting")
		}
	}

	client := grpc_client.NewForTesting(ts.T(), conn)
	return client
}


type clientSuite struct {
	suite.Suite

	createClient func(state.State) service.Client
}

func TestLogical(t *testing.T) {
	suite.Run(t, new(TestLogicalSuite))
}

func TestGRPC(t *testing.T) {
	suite.Run(t, new(TestGRPCSuite))
}

type TestLogicalSuite struct {
	clientSuite
}

func (ts *TestLogicalSuite) SetupTest() {
	ts.createClient = func(s state.State) service.Client {
		return logical_client.New(s)
	}
}

type TestGRPCSuite struct {
	clientSuite
}

func (ts *TestGRPCSuite) SetupTest() {
	ts.createClient = func(s state.State) service.Client {
		return setupGRPCClient(ts, s)
	}
}

func (ts *clientSuite) TestPing() {

	testCases := []struct{
		Name string
	}{
		{
			Name: "some_test",
		},
	}

	for _, test := range testCases {
		ts.T().Run(test.Name, func(t *testing.T) {

			c := ts.createClient(
				state.NewStateForTesting(
					t,
				),
			)

			ctx := context.Background()
			var int64Value int64
			var stringValue string
			var err error
			err = c.Ping(
				ctx,
				int64Value,
				stringValue,
			)
			ts.Require().NoError(err)

			ts.Assert().Fail("TODO: Implement test for client.Ping")
		})
	}
}

func (ts *clientSuite) TestPong() {

	testCases := []struct{
		Name string
	}{
		{
			Name: "some_test",
		},
	}

	for _, test := range testCases {
		ts.T().Run(test.Name, func(t *testing.T) {

			c := ts.createClient(
				state.NewStateForTesting(
					t,
				),
			)

			ctx := context.Background()
			var err error
			_, _, err = c.Pong(
				ctx,
			)
			ts.Require().NoError(err)

			ts.Assert().Fail("TODO: Implement test for client.Pong")
		})
	}
}


package types

import(
	"github.com/thecodedproject/msgen/generator/files/common"
	"github.com/thecodedproject/msgen/generator/files/proto_helpers"
	"github.com/thecodedproject/msgen/parser"
	"io"
	"path"
)

const(
	relativePath = "types.go"
)

type Method struct {
	Name string
	Args []parser.Field
	ReturnArgs []parser.Field
}

func Generate(
	serviceRootImportPath string,
	i parser.ProtoInterface,
	outputDir string,
) error {

	outputFile := path.Join(outputDir, relativePath)

	writer, err := common.CreatePathAndOpen(outputFile)
	if err != nil {
		return err
	}

	return GenerateBuffer(
		serviceRootImportPath,
		i,
		writer,
	)
}

func GenerateBuffer(
	serviceRootImportPath string,
	i parser.ProtoInterface,
	writer io.Writer,
) error {

	baseTemplate := common.BaseTemplate()

	header, err := baseTemplate.Parse(tmpl)
	if err != nil {
		return err
	}

	_, serviceName := path.Split(serviceRootImportPath)

	err = header.Execute(writer, struct{
		Package string
		Imports []string
		NestedTypes []parser.Message
	}{
		Package: serviceName,
		NestedTypes: proto_helpers.NestedMessages(i),
	})
	if err != nil {
		return err
	}

	return nil
}


var tmpl = `package {{.Package}}

// Generated by msgen. DO NOT EDIT.

import(
{{- range .Imports}}
	{{.}}
{{- end}}
)

{{- range .NestedTypes}}

type {{.Name}} struct {
{{- range .Fields}}
	{{ToCamel .Name}} {{.Type}}
{{- end}}
}
{{- end}}

`


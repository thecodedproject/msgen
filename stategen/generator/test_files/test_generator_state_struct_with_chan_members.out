package state

// Generated by stategen. DO NOT EDIT.

import(
	"another/path/to/subtract"
	"some/other/path/to/divide"
	"some/path/to/add"
	"testing"
)

type State interface {
	GetAddRecieveChan() chan<-add.SomeStruct
	GetAddRecieveChanWithSpace() chan<- add.SomeStruct
	GetSubtractGenericChan() chan subtract.Client
	GetDivideSendChan() <-chan divide.SomeStruct
}

func (s *stateImpl) GetAddRecieveChan() chan<-add.SomeStruct {

	return s.addRecieveChan
}

func (s *stateImpl) GetAddRecieveChanWithSpace() chan<- add.SomeStruct {

	return s.addRecieveChanWithSpace
}

func (s *stateImpl) GetSubtractGenericChan() chan subtract.Client {

	return s.subtractGenericChan
}

func (s *stateImpl) GetDivideSendChan() <-chan divide.SomeStruct {

	return s.divideSendChan
}

type stateOption func(*stateImpl)

func NewStateForTesting(
	_ testing.TB,
	opts ...stateOption,
) State {

	var s stateImpl
	for _, opt := range opts {
		opt(&s)
	}
	return &s
}

func WithAddRecieveChan(addRecieveChan chan<-add.SomeStruct) stateOption {

	return func(s *stateImpl) {
		s.addRecieveChan = addRecieveChan
	}
}

func WithAddRecieveChanWithSpace(addRecieveChanWithSpace chan<- add.SomeStruct) stateOption {

	return func(s *stateImpl) {
		s.addRecieveChanWithSpace = addRecieveChanWithSpace
	}
}

func WithSubtractGenericChan(subtractGenericChan chan subtract.Client) stateOption {

	return func(s *stateImpl) {
		s.subtractGenericChan = subtractGenericChan
	}
}

func WithDivideSendChan(divideSendChan <-chan divide.SomeStruct) stateOption {

	return func(s *stateImpl) {
		s.divideSendChan = divideSendChan
	}
}

package state

// Generated by stategen. DO NOT EDIT.

import(
	"another/path/to/subtract"
	"some/other/path/to/divide"
	"some/path/to/add"
	"testing"
)

type State interface {
	GetAddPointer() *add.SomeStruct
	GetAddChanPointer() chan<- *add.SomeStruct
	GetSubtractSlicePointer() []*subtract.Client
	GetDividePointerToSlice() *[]divide.SomeStruct
}

func (s *stateImpl) GetAddPointer() *add.SomeStruct {

	return s.addPointer
}

func (s *stateImpl) GetAddChanPointer() chan<- *add.SomeStruct {

	return s.addChanPointer
}

func (s *stateImpl) GetSubtractSlicePointer() []*subtract.Client {

	return s.subtractSlicePointer
}

func (s *stateImpl) GetDividePointerToSlice() *[]divide.SomeStruct {

	return s.dividePointerToSlice
}

type stateOption func(*stateImpl)

func NewStateForTesting(
	_ testing.TB,
	opts ...stateOption,
) State {

	var s stateImpl
	for _, opt := range opts {
		opt(&s)
	}
	return &s
}

func WithAddPointer(addPointer *add.SomeStruct) stateOption {

	return func(s *stateImpl) {
		s.addPointer = addPointer
	}
}

func WithAddChanPointer(addChanPointer chan<- *add.SomeStruct) stateOption {

	return func(s *stateImpl) {
		s.addChanPointer = addChanPointer
	}
}

func WithSubtractSlicePointer(subtractSlicePointer []*subtract.Client) stateOption {

	return func(s *stateImpl) {
		s.subtractSlicePointer = subtractSlicePointer
	}
}

func WithDividePointerToSlice(dividePointerToSlice *[]divide.SomeStruct) stateOption {

	return func(s *stateImpl) {
		s.dividePointerToSlice = dividePointerToSlice
	}
}

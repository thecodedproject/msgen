package state

// Generated by stategen. DO NOT EDIT.

import(
	"another/path/to/subtract"
	"some/path/to/add"
	"testing"
)

type State interface {
	GetAddSlice() []add.SomeStruct
	GetSubtractSliceOfChans() []chan subtract.Client
}

func (s *stateImpl) GetAddSlice() []add.SomeStruct {

	return s.addSlice
}

func (s *stateImpl) GetSubtractSliceOfChans() []chan subtract.Client {

	return s.subtractSliceOfChans
}

type stateOption func(*stateImpl)

func NewStateForTesting(
	_ testing.TB,
	opts ...stateOption,
) State {

	var s stateImpl
	for _, opt := range opts {
		opt(&s)
	}
	return &s
}

func WithAddSlice(addSlice []add.SomeStruct) stateOption {

	return func(s *stateImpl) {
		s.addSlice = addSlice
	}
}

func WithSubtractSliceOfChans(subtractSliceOfChans []chan subtract.Client) stateOption {

	return func(s *stateImpl) {
		s.subtractSliceOfChans = subtractSliceOfChans
	}
}
